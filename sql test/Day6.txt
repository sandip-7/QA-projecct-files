/*
->ORDER BY keyword is used to sort the result-set in ascending or descending order.
->The ORDER BY keyword sorts the records in ascending order by default. 
To sort the records in descending order, use the DESC keyword.
=========================== syntax ===========================================================
SELECT column1, column2, ...
FROM table_name
where condition
ORDER BY column1, column2, ... ASC|DESC;
===============================================================================================
*/
-- single column ascending and descending --
-- ----------------Ascending-------------------------------------------------------------
select * 
from temp2
order by firstname;

-- ------------------------Descending -------------------
select * 
from temp2
order by DOB DESC;
-- ------------------------------------------------------
-- ---------------Multiple ascending and descending column -----------------------------
select *
from temp2
-- where lastname = "Shrestha"
order by lastname desc, id Asc;
-- ---------------------------------------------------------------------------------------
select * from temp4;
/* How to test null values in a condition?
->It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
->We will have to use IS NULL and IS NOT NULL operators instead
========================== IS NULL SYNTAX ====================================
SELECT column_names
FROM table_name
WHERE column_name IS NULL;
================================================================================
============================== IS NOT NULL SYNTAX =============================
SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;
===============================================================================
*/
-- ------------Null Syntax---------------
select * from temp4
where firstname is null;
-- -------------------------------------
-- --------------Not Null Syntax----------
select * from temp4
where FirstName is not null;
-- --------------------------------------------
/* 
->SELECT TOP clause is used to specify the number of records to return.
->The SELECT TOP clause is useful on large tables with thousands of records.
  Returning a large number of records can impact performance.
  ========================== Top cannot be used in mysql so we use limit=================
SELECT column_name(s)
FROM table_name
WHERE condition
order by column_name asc|desc
LIMIT number;
======================================================================================
*/
-- simple limit syntax with order by -----------------------
select * from temp4
where FirstName is not null
order by id desc
limit 3;


select * from temp2
order by id desc
limit 3;
-- simple limit without order by ----------------------
select * from temp2
limit 2;

-- Order used to find last 3 data --
select * from temp2
order by id desc
limit 3;
-- ----------------------------------------------------------

/* 
->The MIN() function returns the smallest value of the selected column.
->The MAX() function returns the largest value of the selected column.
================= MIN syntaxt ==========================================
SELECT MIN(column_name)
FROM table_name
WHERE condition;
========================================================================
====================== MAX Syntax ======================================
SELECT MAX(column_name)
FROM table_name
WHERE condition;
==========================================================================
*/
-- Min Syntax ------------------------------------------------------
select MIN(id) as MinimumID
from temp2;
-- ---------------------------------------------------------------
select max(firstname) 
from temp2;

select firstname from temp2 order by firstname;

select min(firstname) as MinimumName
from temp2;
-- ---------------------------------------------------------------
-- MAx Syntax --------------------------------------------------
select MAX(id) as MaximumId
from temp2;
-- ---------------------------------------------------------------
/*
-> COUNT() function returns the number of rows that matches a specified criterion.
-> NULL values are not counted THEY ARE IGNORED.
================ count syntax ===============
SELECT COUNT(column_name)
FROM table_name
WHERE condition;
=============================================

-> AVG() function returns the average value of a numeric column
-> NULL values are ignored.
==================AVG Syntax =============
SELECT AVG(column_name)
FROM table_name
WHERE condition;
==========================================
-> SUM() function returns the total sum of a numeric column. 
-> NULL values are ignored.
============ SUM Syntax ===============================
SELECT SUM(column_name)
FROM table_name
WHERE condition;
=========================================================

*/

select count(*)
from temp4;
-- It doesnot ignore null values when all columns are included because it counts on rows
select count(firstname)
from temp4;

Select * from temp4;


-- Average syntax -------------------------------------------
select avg(dob)
from temp2;

-- Sum syntax---------------------------------------------
select sum(dob)
from temp2;
-- ------------------------------------------------------

select count(dob)
from temp2;

select * from temp2;